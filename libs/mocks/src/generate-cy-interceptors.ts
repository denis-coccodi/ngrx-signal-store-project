import { workspaceRoot } from '@nrwl/devkit';
import fs from 'fs';
import path from 'path';
import { Endpoint } from './mocks.model';

const FgGreen = '\x1b[32m';
const FgResetColor = '\x1b[0m';

export function generateCypressApiInterceptorsFile(
	endpoints: Endpoint[],
	getDestinationPath: (endpoint: Endpoint) => string
) {
	const mockImports: string[] = [];
	const intercepts: string[] = [];

	// create imports and interptors, and push them into arrays
	endpoints.forEach((endpoint) => {
		if (!endpoint.createCypressInterceptor) {
			return;
		}
		const { importStatement, interceptor } = {
			...createImportAndInterceptorFromEndpoint(endpoint, getDestinationPath),
		};

		mockImports.push(importStatement);
		intercepts.push(interceptor);
	});

	// Create final file content
	const outputFileContent = `
${mockImports.join('\n')}

export const mockApiServices = () => {
	// File automatically generated by libs/mocks/src/generate-cy-interceptors.js. Do not manually edit
	${intercepts.join('\n')}
};
`;

	// Write to file
	const outputPath = path.join(
		workspaceRoot,
		'apps/fe-team-e2e/src/pims/fixtures/service-apis-interceptors.ts'
	);
	fs.writeFileSync(outputPath, outputFileContent);

	console.log(
		`${FgGreen}%s${FgResetColor}`,
		`service-apis-interceptor file generated successfully at: ${outputPath}`
	);
}

function createImportAndInterceptorFromEndpoint(
	endpoint: Endpoint,
	getDestinationPath: (endpoint: Endpoint) => string
) {
	const importName =
		endpoint.fileName.toUpperCase().replace(/-/g, '_') + '_MOCK';

	const destinationPath = getDestinationPath(endpoint);
	const mockPath = destinationPath.replace(
		/^libs\/mocks\/src\/lib\/pims\/api-services/,
		'@pims-api-mocks'
	);

	// Create import statement
	const importStatement = `import ${importName} from '${mockPath}';`;

	// Create interceptor for said endpoint
	const interceptor = GenerateInterceptor(endpoint, importName, mockPath);

	return { importStatement, interceptor };
}

function GenerateInterceptor(
	endpoint: Endpoint,
	importName: string,
	mockPath: string
) {
	const urlPathWithNoQueryParams = endpoint.url.split('?')[0]; // Remove query params for intercept pattern
	const urlRegex = GenerateRegex(urlPathWithNoQueryParams);
	return `
		cy.intercept({
			method: '${endpoint.method.toUpperCase()}',
			url: ${endpoint.interceptorRegex || urlRegex},
		},
		(req) => {
			req.headers = {
				...req.headers,${endpoint.additionalHeaders || ''}
				'cache-control': 'no-cache',
			};

			req.reply({
				statusCode: ${endpoint.statusCode},
				body: ${importName},
				headers: {
					...req.headers,${endpoint.additionalHeaders || ''}
					'cache-control': 'no-cache'
				}
			});

			console.log('Mocking api with ${mockPath}');

		}).as('${kebabToCamelCase(endpoint.fileName)}MockedData');`;
}

// Create regex pattern for intercept
function GenerateRegex(url: string) {
	const regexString = url
		// Escape forward slashes and dots
		.replace(/\//g, '\\/')
		.replace(/\./g, '\\.')
		// Replace :param=value with a wildcard for any value
		.replace(/:[^/=]+=[^/]+/g, '[^/?]+');
	// can have anything before the regexString (normally v2.0/), and anything as query params or no query params at all
	return new RegExp(`.+\\/${regexString}(\\/?\\?.+)?$`, 'g');
}

function kebabToCamelCase(str: string) {
	return str.replace(/-([a-z])/g, (_match, letter) => letter.toUpperCase());
}
