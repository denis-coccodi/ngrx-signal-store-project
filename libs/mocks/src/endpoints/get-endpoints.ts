import { Endpoint, EndpointMethods } from '../mocks.model';
import {
	batchStatusOrderId,
	categoryCodeQueryParamValue,
	categoryId,
	clientUserId,
	clientUserIdQueryParam,
	orderId,
	questionnaireId,
	SELECTED_DOMAIN,
	SELECTED_V1_BASE_URL,
	staffUserId,
	stateId,
} from './endpoints.constants';

// createCypressInterceptor, if set to true, will automatically create a Cypress interceptor for said api while running npm run mocks:pims
export const getEndpointsWithUrlVariables: Endpoint[] = [
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/${batchStatusOrderId}/batchstatus?polling=true`,
		fileName: 'order-batchstatus',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/states/${stateId}`,
		fileName: 'state-id',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/categories/${categoryId}`,
		fileName: 'category-info',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/categories/:categoryId=38`,
		interceptorRegex: /.+\/v2\.0\/admin\/categories\/38(\/?\?.+)?$/g,
		fileName: `category-info-wei-r`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/questionnaires/${questionnaireId}`,
		fileName: `editable-questionnaire`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/questionnaires/:questionnaireId=481`,
		interceptorRegex: /.+\/v2\.0\/admin\/questionnaires\/481(\/?\?.+)?$/g,
		fileName: `published-questionnaire`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/staffusers/${staffUserId}`,
		fileName: `staff-user-id`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/${orderId}`,
		interceptorRegex: /.+\/v2\.0\/admin\/orders\/[0-9]+(\/?\?.+)?$/g,
		fileName: `order-info`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/${orderId}/phonecalls?polling=true`,
		fileName: `order-phone-calls`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/users/${clientUserId}/messages`,
		fileName: `client-user-messages`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/users/${clientUserId}/allergies`,
		fileName: `client-allergies`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/users/${clientUserId}/visitnotes`,
		fileName: `client-visit-notes`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/users/${clientUserId}/matchedusers`,
		fileName: `client-matched-users`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/${orderId}/isbatchablehistory`,
		fileName: `order-is-batchable-history`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		baseurl: SELECTED_DOMAIN,
		url: `staff-users/${staffUserId}`,
		fileExtension: 'html',
		fileName: `staff-user-detail`,
		createCypressInterceptor: false,
		additionalHeaders: `
					'content-type': 'text/html',`,
	},
];

export const getEndpointsWithUrlVariablesAndQueryParams: Endpoint[] = [
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/users/${clientUserId}/notes?limit=999999&polling=true`,
		fileName: 'client-notes-polling',
		createCypressInterceptor: true,
	},
];

export const getNoVariablesEndpointsWithQueryParams: Endpoint[] = [
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders?limit=100&offset=0&sort=default&order=desc&timezone=Europe%2FLondon&is_batchable=false`,
		interceptorRegex: /.+\/v2\.0\/admin\/orders\/?\?.*/g,
		fileName: 'default-params-orders',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/areacodes?polling=true`,
		fileName: 'areacodes-polling',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/sessions?polling=true`,
		fileName: 'sessions-polling',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/business/holidays?polling=true`,
		fileName: 'business-holidays-polling',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/staffusers/activeclinicians?polling=true`,
		fileName: 'active-clinicians-polling',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/summary?type[]=banner&type[]=funnel&polling=true`,
		fileName: 'summary-banner',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/prxhub/integrations?limit=20&total=9999&offset=0&sort=dispense_order_id&order=desc&search=`,
		fileName: 'rx-hub-integrations',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/scheduledorders?limit=100&offset=0&sort=default&order=asc&schedule_code=slv%7Casync_and_phone&timezone=Europe%2FLondon`,
		fileName: 'appointments-scheduled-orders',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/fillrequests?total=9999&limit=50&offset=0`,
		fileName: 'mail-order-fillrequests',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/completedorders?limit=50&offset=0&sort=default&order=desc&timezone=Europe%2FLondon`,
		fileName: 'history-completed-orders',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		baseurl: SELECTED_V1_BASE_URL,
		url: `cancelledorders/v1/orders?limit=100&offset=0&sort=default&order=desc&total=0&timezone=Europe%2FLondon&start_time=2024-11-13T23%3A00%3A00.000Z&end_time=2024-11-14T23%3A00%3A00.000Z`,
		interceptorRegex:
			/.+\/cancelledorders\/v1\/orders\/?\?.*start_time=.+end_time=.+/g,
		fileName: 'cancelled-orders-followup-support',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/pharmacy/fills?total=0&limit=50&offset=0&sort=pharmacy_default&order=desc&status=in-progress%7Con-hold%7Ccancelled%7Cdelivered%7Cerror%7Cordered%7Csent%7Cshipped`,
		fileName: 'pharmacy-with-accepted-statuses', // empty
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/categories?limit=100`,
		fileName: 'admin-categories-info',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/questionnaires?category_code=${categoryCodeQueryParamValue}`,
		interceptorRegex:
			/.+\/v2\.0\/admin\/questionnaires\/?\?.*category_code=.+/g,
		fileName: `questionnaires-in-${categoryCodeQueryParamValue.toLowerCase()}-category`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/questionnaires?category_code=WEI-R`,
		interceptorRegex:
			/.+\/v2\.0\/admin\/questionnaires\/?\?.*category_code=WEI-R.*/g,
		fileName: `questionnaires-in-wei-r-category`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/content/web/pimsParameters?polling=true`,
		fileName: `cms-pims-parameters`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `maps/api/geocode/json?address=N1%206NL,UK&components=country:UK&key=AIzaSyAM5ekW2GcyM7154o_kMQAyj6jYicPqfkY`,
		baseurl: 'https://maps.googleapis.com',
		fileName: `google-maps-geocode`,
		hideToken: true,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `maps/api/timezone/json?location=51.527705,-0.080429&timestamp=1731686017&key=AIzaSyAM5ekW2GcyM7154o_kMQAyj6jYicPqfkY`,
		baseurl: 'https://maps.googleapis.com',
		fileName: `google-maps-timezone`,
		hideToken: true,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders?offset=0&limit=5&user_id=${clientUserIdQueryParam}&admin_status=0.1%7C2.5%7C4.5%7C4.7%7C4.9%7C5.1%7C5.4%7C5.5%7C5.6%7C5.7%7C5.8%7C5.9%7C7.0%7C7.1%7C7.2%7C7.7%7C9.2%7C9.8%7C9.9%7C10&paid=true&sort=created&order=desc`,
		interceptorRegex: /.+\/v2\.0\/admin\/orders\/?\?.*user_id=.+/g,
		fileName: `orders-from-user-${clientUserIdQueryParam}`,
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/?is_batchable=true&limit=50&offset=0&sort=default&order=desc&search=&timezone=Europe%2FLondon&category_code=WEI-F&total=9999`,
		interceptorRegex: /.+\/v2\.0\/admin\/orders\/?\?.*is_batchable=true.*/g,
		fileName: 'batching-params-orders',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/admin/orders/bodymassindex?limit=400&offset=0&user_id=64029&order=desc`,
		fileName: 'bmi-rows',
		createCypressInterceptor: true,
	},
];

export const getEndpointsWithoutVariables: Endpoint[] = [
	{
		method: EndpointMethods.GET,
		url: `v2.0/content/web/frontendParameters`,
		fileName: 'cms-frontend-parameters',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/products/categories`,
		fileName: 'product-categories',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: `v2.0/states`,
		fileName: 'states',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/batches/rules',
		fileName: 'admin-batches-rules',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/batches/ruletypes',
		fileName: 'admin-batches-ruletypes',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/business/hours',
		fileName: 'admin-business-hours',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/mailorderpharmacies',
		fileName: 'admin-mailorderpharmacies',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/medications/dispenseunits',
		fileName: 'admin-medications-dispenseunits',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/messages',
		fileName: 'admin-messages',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/messages/categories',
		fileName: 'admin-messages-categories',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/messages/pool',
		fileName: 'admin-messages-pool',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/messagetemplates',
		fileName: 'admin-messagetemplates',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/messagetemplates/validate',
		fileName: 'admin-messagetemplates-validate',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/promos',
		fileName: 'admin-promos',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/queue/entries',
		fileName: 'admin-queue-entries',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/slv/schedules',
		fileName: 'admin-slv-schedules',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/states',
		fileName: 'admin-states',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/users',
		fileName: 'admin-users',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/users/roles',
		fileName: 'admin-users-roles',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/admin/videocalls/issues',
		fileName: 'admin-videocalls-issues',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/bod/companion/body-measurements/latest',
		fileName: 'bod-companion-body-measurements-latest',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/bod/companion/preferences',
		fileName: 'bod-companion-preferences',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/bod/companion/streaks/latest',
		fileName: 'bod-companion-streaks-latest',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/bod/companion/tracker/latest',
		fileName: 'bod-companion-tracker-latest',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/bod/companion/tracker/types',
		fileName: 'bod-companion-tracker-types',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/diagnoses',
		fileName: 'diagnoses',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/doctors',
		fileName: 'doctors',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/gpaddresses',
		fileName: 'gpaddresses',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/medications',
		fileName: 'medications',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/messages',
		fileName: 'messages',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/meta/status',
		fileName: 'meta-status',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/orderlines/chargetypes',
		fileName: 'orderlines-chargetypes',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/orders',
		fileName: 'orders',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/orders/count',
		fileName: 'orders-count',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/products',
		fileName: 'products',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/questionnaires/options/status',
		fileName: 'questionnaires-options-status',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/rejectionReasons',
		fileName: 'rejectionReasons',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/results',
		fileName: 'results',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/securityQuestions',
		fileName: 'securityQuestions',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/statuses',
		fileName: 'statuses',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/transaction/object',
		fileName: 'transaction-object',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me',
		fileName: 'users-me',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/addresses',
		fileName: 'users-me-addresses',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/details',
		fileName: 'users-me-details',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/devices',
		fileName: 'users-me-devices',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/lastordersummary',
		fileName: 'users-me-lastordersummary',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/paymentmethods',
		fileName: 'users-me-paymentmethods',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/paymentmethods/default',
		fileName: 'users-me-paymentmethods-default',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/pharmacies',
		fileName: 'users-me-pharmacies',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/rxkeypair',
		fileName: 'users-me-rxkeypair',
		createCypressInterceptor: true,
	},
	{
		method: EndpointMethods.GET,
		url: 'v2.0/users/me/subscriptions',
		fileName: 'users-me-subscriptions',
		createCypressInterceptor: true,
	},
];
